#include <string>
#include <vector>

using namespace std;

/**
 * @brief 沒寫出來
 * 
 * parame: 00000000 00000000 00000000 00000111(7) + 00000000 00000000 00000000 00000010(2)
 * expect：00000000 00000000 00000000 00001001(9)
 * 
 * 第一轮：
 * 00000000 00000000 00000000 00000111
 * 00000000 00000000 00000000 00000010
 * ----------------------------------- 与运算
 * 00000000 00000000 00000000 00000010 与不为0，证明有需要进位的
 * 
 * 
 * 00000000 00000000 00000000 00000111
 * 00000000 00000000 00000000 00000010
 * ----------------------------------- 异或运算
 * 00000000 00000000 00000000 00000101 如果与为0的话，其实异或就是和了，不过本例与不为0，需要进位。
 * 
 * 
 * 第二轮：
 * 00000000 00000000 00000000 00000100 上一轮与<<1： 进位的办法就是把上一轮与的结果左移一位(进位)
 * 00000000 00000000 00000000 00000101 上一轮异或结果
 * ----------------------------------- 与运算
 * 00000000 00000000 00000000 00000100 与不为0，证明还有需要进位的
 * 
 * 
 * 00000000 00000000 00000000 00000100 上一轮与<<1
 * 00000000 00000000 00000000 00000101 上一轮异或结果
 * ----------------------------------- 异或运算
 * 00000000 00000000 00000000 00000001 
 * 
 * 
 * 第三轮：
 * 00000000 00000000 00000000 00001000 上一轮与<<1
 * 00000000 00000000 00000000 00000001 上一轮异或结果
 * ----------------------------------- 与运算
 * 00000000 00000000 00000000 00000000 与为0，证明已经没有进位的必要，异或即为和。
 * 
 * 
 * 00000000 00000000 00000000 00001000 上一轮与<<1
 * 00000000 00000000 00000000 00000001 上一轮异或结果
 * ----------------------------------- 异或运算
 * 00000000 00000000 00000000 00001001 与为0，异或即为结果
 * 
 */
class Solution {
 public:
  int getSum(int a, int b) {
    while (b != 0) {
      int carry = (a & b) << 1;
      a ^= b;
      b = carry;
    }
    return a;
  }
};
